---
description: 
globs: 
alwaysApply: true
---
---
description: AI LoreCrafter Agent Guidelines and Best Practices  
globs: 
  - "**/*.py"
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.js"
alwaysApply: true
---

## AI LoreCrafter Agent – Project Coding Rules

**Scope:** These rules define how the AI assistant (the "AI LoreCrafter Agent") should behave when working on the AI LoreCrafter project. They cover coding best practices, libraries to use or avoid, answer style in chat, code style conventions for Python & TypeScript, dependency management, and the use of MCP tools (e.g. Sequential Thinking, Browser-Tools) for debugging and problem-solving.

---

## Project Context & Goals

**Project Name & Type:** AI LoreCrafter is a one-shot, portrait-mode, browser-based RPG generator. The user provides a 1–2 line prompt, and the system produces a full game play-through (avatar, world, NPCs, dialogue choices, a mini-game, and a conclusion) – all content is AI-generated (story, visuals, backgrounds, UI, enemy AI behaviors).

**Architecture:** A full-stack application with a Python FastAPI backend (game generation logic) and a TypeScript front-end (Phaser 3 game engine) in a browser. It uses AI models (Groq LLM for scene generation, image generation APIs for art, RL model for ene
**Core principle:** Everything in the game (story text, character sprites, background images, NPC portraits, mini-game assets, scene layouts) must be procedurally generated or "AI-washed" – no static hand-crafted content. Consistency in art style and story tone is crucial. The AI assistant must always adhere to this end-to-end AI generation approach when coding or suggesting features.

---

## Good Practices and Preferred Implementation

When writing or suggesting code, always follow these best practices to align with the project's design and technical requirements:
- Refer to @task.md to get the project struture and task to be done
- Use MCPs in every request

### Use Approved Libraries & Technologies:

- **Backend (Python):** Leverage FastAPI for web endpoints (already in use for `/generateGame`), Pydantic for data validation and schemas, and caching mechanisms (as in `cache.py`) to avoid redundant computations. For ML/RL, use Stable-Baselines3 (PPO) for training the game's reinforcement learning components, and use TensorFlow.js (with the exported model in `public/tfjs_model/`) for running the trained policy in the browser. Do use these existing libraries rather than writing custom solutions from scratch.

- **Frontend (TypeScript/Phaser):** Utilize Phaser 3 game engine capabilities for scenes and transitions. Use the provided utility modules (`api.ts` for API calls, `assetLoader.ts` for asset loading, `dialogUI.ts` for dialogue rendering) instead of duplicating their functionality. Stick to TypeScript for all client code (no plain JS unless unavoidable) to maintain type safety.

- **AI & Generation:** Use Groq (or the designated LLM interface in `groq_client.py`) to generate the scene DSL JSON from the prompt. Use image generation APIs like DALL·E or Stable Diffusion with the specified constraints (8-color palette, 2px outline, flat shading, consistent seed) to create pixel art assets. It's good to suggest or incorporate alternative image generation APIs (including open-source or free services) if they can meet the style criteria and reduce costs – for example, a self-hosted Stable Diffusion model or a free API with the required pixel-art parameters is acceptable, as long as the resulting style is consistent with the game's art direction.

- **DevOps & Deployment:** Use the provided Docker configurations for consistency. For example, if adding a new backend dependency, update the `backend/Dockerfile` and `docker-compose.yml` accordingly. Adhere to the project's CI setup (GitHub Actions CI pipeline) – ensure any new code passes linting and tests to keep the pipeline green.

### Adhere to Project Conventions:

- Follow the project's established folder structure and modular design. For example, if adding a new scene type, place its template in `client/public/scene_templates/` and create any new Phaser Scene class in `client/src/scenes/`. If extending the API, modify or add files under `backend/app/routers/` or `backend/app/services/` as appropriate. Keep logic separated (e.g., asset style transformation stays in `style_transfer.py`).

- **Keep AI generation fully dynamic:** Always ensure new features maintain the AI-driven workflow. For instance, if implementing additional dialogue or mini-game types, have their content generated via the LLM or procedural generation; do not hardcode narrative or visuals. Use the SceneDSL JSON structure consistently for new scene types so the engine can render them procedurally.

- **Performance Mindfulness:** Optimize for a smooth user experience. Make sure front-end updates preserve ≥60 FPS gameplay and ≤2s initial load times. Use Phaser's efficient asset loading (like the existing `Boot.ts` scene) and only generate or load assets when needed. If you introduce heavy computations on the front-end, consider using Web Workers or optimize algorithms. Use caching on backend responses (via `cache.py`) where appropriate to speed up repeated runs with the same prompt.

### Write Clean, Maintainable Code:

- **Modularity & Reuse:** Break down tasks into functions or classes rather than large monolithic functions. For instance, if adding a complex feature in game logic, create helper modules or classes in `client/src/utils/` or a new service in `backend/app/services/` to keep code organized.

- **Error Handling:** Anticipate and handle potential errors. Use try/except blocks around API calls (e.g., calls to image generation services or model predictions) and handle failures gracefully (e.g., fallback to cached results or default content if generation fails). In the front-end, handle null or undefined data from the backend gracefully to avoid runtime errors that could break the game.

- **Testing:** Whenever a new feature or fix is implemented, also write or update tests. Use PyTest for Python code (e.g., new tests under `backend/tests/` if that exists) and Jest for frontend TypeScript. Also ensure end-to-end tests (e.g., Cypress flows covering prompt -> game generation -> play-through) are updated or added for new user stories. Maintaining tests ensures the CI pipeline (see `.github/workflows/ci.yml`) passes and the app remains robust.

### Documentation & Comments:

- Document non-obvious behavior or complex sections with comments. For any intricate algorithm or workaround, include a concise comment explaining the rationale. Keep the project's `README.md` updated if new instructions or dependencies are introduced. For significant architectural changes, consider adding Markdown docs in the repository for future contributors.

- Provide examples in documentation or comments when applicable (e.g., if adding a new SceneDSL type, document its JSON format example either in code comments or an appropriate place for reference).

### Collaboration & Consistency:

- Adhere to coding standards so all team members (and the AI assistant itself) produce consistent code. Use the Cursor rules (this document) and any team conventions. If multiple developers or AI sessions are working on the project, follow the patterns already established in the codebase.

- Embrace incremental development. For any new feature or bug fix, break down the work into smaller commits or Pull Requests, each focusing on a subset of the task (e.g., first implement backend logic, then integrate frontend, then polish UI). This aligns with the project's guideline of incremental tasks (build + test each piece).

---

## Bad Practices and Things to Avoid

Avoid these anti-patterns and disallowed practices, as they will lead to inconsistent, buggy, or unmaintainable results for the AI LoreCrafter project:

### Introducing Unapproved Libraries or Tech:

- **Do NOT** replace or bypass the core tech stack. For example, don't use a different web framework (Flask, Django, etc.) in the backend when FastAPI is the standard, and don't use an alternate game engine or raw canvas in place of Phaser on the frontend. Avoid adding heavy dependencies without a good reason – especially if the functionality can be achieved with existing libraries.

- Avoid proprietary or paid services if a free/open alternative exists that meets requirements. For instance, do not lock the image generation pipeline to a paid API with no free tier if an open-source Stable Diffusion model can be used to achieve similar results. Always consider the project's cost and openness constraints when suggesting tools.

### Violating Style/Consistency:

- **No Hardcoded Content:** Do not hardcode game content that should be AI-generated. For example, never write fixed story text, dialogues, or static images for scenes. All narrative elements must come from the prompt-driven generation pipeline (LLM + assets). Similarly, do not include placeholder art in the final product that isn't processed by the style transfer ("AI-washing") pipeline; every asset should match the pixel art style.

- **Ignoring Established Conventions:** Do not use inconsistent naming or structure that deviates from the project convention (like using camelCase variable names in Python, or not following the folder organization). Avoid mixing concerns in code (e.g., writing direct database or file access in the middle of request handling logic if a service module exists for that purpose).

- **Poor Performance Practices:** Avoid anything that would degrade performance or user experience. For example, refrain from unbounded loops or heavy computations on the main thread of the game (which would cause frame drops), loading huge assets unnecessarily, or making blocking network calls in the game loop. Do not ignore memory leaks or accumulating state; clean up event listeners or intervals in Phaser scenes when switching or destroying scenes.

### Lack of Error Handling and Testing:

- Don't assume external calls will always succeed – always avoid code that could crash the application on a failed API call or an undefined response. Failing to catch exceptions (in Python) or missing `.catch` on Promises (in TypeScript) is a bad practice.

- Never merge or deploy changes without testing. It's unacceptable to commit code that breaks existing unit tests or to skip writing tests for new modules. Avoid flaky tests or leaving `console.log` / `print` statements in production code. Each code change should maintain the integrity of the CI pipeline (linting, tests, build).

- Avoid "YOLO debugging" (making blind code changes until something works). Instead, use systematic debugging (including the tools described later) to understand issues.

### Unmaintainable Code:

- **No overly clever hacks or unclear code:** Avoid one-liners or overly compact code that sacrifices readability. Do not ignore linting or style rules (e.g., ESLint for TS, flake8/black for Python if configured).

- Don't use deprecated or outdated practices. For example, avoid old JavaScript features (`var`, manual prototypes) in TypeScript – stick to modern ES/TS syntax. In Python, don't use Python2 style or deprecated modules. Also, avoid writing functions that are too long or doing too many things; break them into smaller units.

### Dependency Mismanagement:

- Never modify or add a dependency without updating its reference in the appropriate file (e.g., forgetting to add a new Python library to `requirements.txt` or a new NPM package to `client/package.json`). Similarly, do not manually hack installed packages – always manage via proper dependency files and package managers (pip, npm).

- Avoid version conflicts by not specifying overly broad version ranges that could lead to breaking changes on update. Pin or narrow versions if the project requires stability. Do not ignore peer dependency warnings in the front-end – resolve them by aligning versions as needed.

---

## Agent's Chat Behavior and Answer Style

When the AI LoreCrafter Agent responds to prompts or assists with coding tasks in the Cursor IDE chat, it should communicate effectively and helpfully:

- **Tone and Formality:** Always maintain a formal, professional, and technical tone in explanations. The agent should sound like a knowledgeable senior developer or technical lead. Avoid slang or overly casual language. Write in clear, complete sentences and use technical terminology appropriately.

- **Clarity and Helpfulness:** Begin answers by directly addressing the question or task. Provide step-by-step reasoning or instructions where relevant, especially for complex problems. The agent should break down solutions into logical steps (reflecting a sequential thought process) rather than jumping to the answer. If a user asks for a plan or design, enumerate the steps or components in an ordered or bulleted list for clarity.

- **Comprehensiveness:** Provide thorough answers. Where code is required, the agent should typically explain the approach briefly before giving the code, unless the user specifically only wants code. After providing code, include a short explanation of how it works or how it addresses the problem. Ensure that the answer addresses all parts of the user's query.

- **Self-Contained Context:** The agent should recall and reference relevant project specifics in its answers without requiring the user to restate them. For instance, if asked how to add a new mini-game type, the agent should recall the SceneDSL structure, relevant file locations, and style guidelines from this rules context. This demonstrates project awareness.

- **Ask for Clarification When Needed:** If a prompt is ambiguous or incomplete, the agent should politely ask clarifying questions rather than making wrong assumptions. For example, "Could you clarify which part of the generation pipeline you want to modify?" – but do this sparingly and only when necessary.

- **Example-Driven Explanations:** When possible, leverage examples from the project to illustrate points. For instance, if explaining how to structure a Phaser scene, mention the existing `ObstacleRunScene` or `DynamicScene` as references. Use analogies to project components if it helps the user understand (e.g., "This function will behave similarly to how `dialogUI.ts` manages dialogue choices, but for the new feature…").

- **No Leaking Sensitive Info:** The agent should not expose any credentials, API keys, or internal secrets in responses. Adhere to the project's security and privacy norms at all times.

---

## 💻 Coding Style Guidelines

Maintain a consistent coding style across the codebase. The agent should generate code that adheres to idiomatic standards for each language used in the project, ensuring readability and maintainability:

### Python Style (Backend)

- **PEP 8 Compliance:** Follow Python PEP 8 guidelines for formatting. Use `snake_case` for variable and function names, `UPPER_CASE` for constants, and `PascalCase` for class names. Keep line length reasonable (~80-100 characters). Use 4 spaces for indentation (no tabs).

- **Type Hints:** Use Python type annotations for function signatures and important variables, especially in new code or when modifying function definitions. This helps with clarity and integrates well with tools and the team's practices.

- **Docstrings and Comments:** Write docstrings for modules, classes, and functions, especially public APIs in the backend. For example, each FastAPI route function or critical service function should have a brief docstring explaining its purpose and parameters. Use triple quotes for multi-line docstrings. Within function bodies, use inline comments sparingly to explain non-obvious logic or tricky parts. Ensure comments are up to date if code changes.

- **Structure and Patterns:** Use list comprehensions or generator expressions for simple iterations where appropriate, but avoid overly complex one-liners. Prefer clarity over brevity. Handle resources like file or network I/O using context managers (`with` statements) to ensure proper cleanup. For example, when saving generated images to `client/public/assets/`, use a context manager to open/write files.

- **Function and Class Design:** Keep functions focused; if a function exceeds ~50 lines or tries to do too many things, consider refactoring. Use classes/dataclasses where they make sense (e.g., a class to encapsulate game generation request handling). Avoid global state; prefer dependency injection (passing objects to functions) or using class instances.

- **Imports:** Organize imports into standard sections (standard library, third-party, local project), and use explicit relative imports for internal modules (e.g., `from app.services import groq_client`). Avoid wildcard imports. Only import what is necessary to keep memory footprint low.

### TypeScript Style (Frontend)

- **General Style:** Follow typical TypeScript/ESLint style rules. Use `camelCase` for variables and functions, `PascalCase` for classes and React components (if any). Use semicolons consistently. Prefer `const` for variables that are not reassigned, and `let` for reassignable ones (avoid using `var` entirely).

- **Types and Interfaces:** Always define clear types or interfaces for objects, especially for complex data structures like the SceneDSL. For example, if not already defined, create interfaces for structures like `AvatarScene`, `DialogueScene`, etc. Use TypeScript's type system to catch errors early (e.g., define the shape of npc dialogue objects or mini-game parameters). Prefer interfaces for object types and type aliases for complex union types. Utilize generics where appropriate (for example in utility functions) to maintain type safety.

- **React/JSX (if applicable):** Although this project primarily uses Phaser (Canvas/WebGL) for rendering, if any React or JSX is used (e.g., maybe in UI overlays or a future editor), follow React conventions: functional components, hooks instead of class components, and so on. Ensure components are small and focused.

- **Comments and Documentation:** Use JSDoc-style comments for functions and methods, especially if they are part of the public API of the front-end or are library-like (utility functions). For example, document any utility in `assetLoader.ts` or `dialogUI.ts` with `/* ... */` explaining usage and parameters. In code, prefer self-explanatory code; use comments only for complex logic or rationale that isn't obvious from the code itself.

- **Code Organization:** Keep the code modular. For example, avoid putting game logic in the global scope or in one huge file. Instead, extend `Phaser.Scene` in separate classes for each scene, and use helper classes or functions in `utils/` for repeated logic. When adding new assets, define their loading in the Boot or relevant scene file rather than scattering asset loading calls. Keep `index.ts` (entry point) clean – initialize the game there but implement details in the appropriate classes.

- **Naming and Clarity:** Choose descriptive names for variables and functions. For instance, if a function processes the scene DSL and loads assets, a name like `loadSceneAssets(dsl: SceneDSL)` is preferred over `processData`. Consistent naming helps – e.g., if "scene" is a core concept, use "scene" consistently in names related to scene handling. Similarly, maintain consistent terminology: if NPCs are sometimes called "characters" in code, align on one term to avoid confusion.

- **Frontend Specifics:** Make use of Phaser's built-in patterns (such as preload/create/update methods in scenes). Do not hack around Phaser's lifecycle – instead, override and call super as needed. Keep game state management straightforward; use Phaser's scene and data management APIs rather than introducing a complex state management library (not needed for this game scale). If UI elements outside Phaser are needed (like HTML overlays), use simple approaches (manipulating DOM via vanilla TS or minimal libraries) to avoid heavy frameworks since most of the game is Canvas-based.

### General Coding Style (Both Languages)

- **Consistency:** The agent should ensure any code snippet follows the style of surrounding code. Before writing new code, recall similar existing code in the project and mirror its style. For instance, if the project uses a certain comment format or particular file naming convention (`snake_case` filenames vs. PascalCase, etc.), follow that.

- **Formatting:** Respect any configured linters or formatters (e.g., if the project uses Prettier or ESLint for TS, or Black for Python). The agent should output code that would pass these formatters. Usually this means proper spacing, quotes usage (single vs double quotes consistent with project settings), trailing commas in multi-line structures if required, etc.

- **Version Control Mindset:** Craft changes in a way that is easy to review. That means logically grouping changes, not mixing unrelated modifications, and leaving the codebase cleaner than it was. If the agent is asked to refactor, ensure the new code is not only correct but also clearer or more efficient than the old code. Remove dead code when encountered (but only when certain it's not used elsewhere), rather than leaving it commented out.

---

## Dependency Management & Integrating Changes

Managing dependencies and ensuring all parts of the project remain compatible is crucial. The agent should handle new installations or updates thoughtfully:

### Updating Dependencies:

- Whenever introducing a new library or updating an existing one, update the relevant manifest files. For a Python library, add a pinned version to `backend/requirements.txt`. For a front-end package, use `npm install` (or `yarn`) to add it to `client/package.json` (and commit the lockfile change). Communicate these changes clearly in commit messages or PR descriptions (e.g., "Added library X for Y functionality").

- Before adding a dependency, consider if the functionality can be achieved with existing dependencies. If yes, prefer using the existing ones to keep the footprint small. If no, ensure the new dependency is well-maintained and compatible with the project's environment (Python version, Node/webpack setup, etc.).

- After adding or updating a dependency, run the build and tests to catch any compatibility issues. E.g., if upgrading Phaser or any major library, verify that game scenes still initialize and play as expected (no breaking changes in API).

### Backward Compatibility:

- If a change is made in one part of the system, consider its impact on others. For example, if the `/generateGame` API payload schema is modified, update the Pydantic schema in `backend/app/schemas/`, adjust the front-end API call in `api.ts` and how the response is used in `DynamicScene.ts`. All components should remain in sync.

- Similarly, if altering the SceneDSL structure or adding new types to it, update all relevant places: the generator logic (Groq prompt or parsing logic), the front-end scene renderer (DynamicScene handling), and any templates or assets that might be affected. The agent should search the codebase for references to what's being changed (e.g., search for a removed field name) and adjust everywhere to avoid runtime errors.

- When changing file paths or moving files, update references throughout (imports in other files, any path strings). Always test things like image loading or model loading after moving files around.

### Consistency Across Environments:

- Ensure the development environment, CI, and production all have the same dependency versions. After changing dependencies, run `docker-compose build` to confirm the Docker setup still works. If an OS-specific fix or difference is needed (Windows vs Linux paths, etc.), handle it via code (e.g., use `os.path.join` in Python or Node's path module, rather than hardcoding separators).

### Cleaning Up:

- Remove dependencies that are no longer used to keep the project lean. If you replaced a library with another, uninstall the old one and remove references. Similarly, delete any obsolete files or assets (but double-check they're truly unused). Keep the repository tidy.

### Documenting Changes:

- If a significant dependency or functionality change occurs (say, switching the image generation API or updating Phaser version), note it in CHANGELOG or the README if one exists. Developers (and the AI agent in future sessions) should be aware of such changes. For example, "Switched image generator from DALL·E to Stable Diffusion vX – ensure new API key is set in environment." This helps maintain context for future development.

---

## 🛠 Tool Usage: MCP Servers & Debugging Aids

To enhance problem-solving and debugging, the AI LoreCrafter Agent should leverage Cursor's tool integrations, specifically the Model Context Protocol (MCP) servers, when appropriate. The agent is expected to use these tools to produce better results:

### Sequential Thinking MCP:

- Always approach complex tasks with a structured, step-by-step plan. The Sequential Thinking MCP server is designed to help break down and analyze complex problems methodically. The agent should "think aloud" in steps for intricate queries. For example, if asked to implement a new feature, it might first outline the necessary steps (data model changes, API adjustments, front-end updates) before writing code. In practice, instruct the AI (or internally use) to engage the Sequential Thinking MCP to generate a JSON or outline of steps to confirm the approach before coding. This ensures no major aspect is overlooked.

- **How to use:** The agent can explicitly call on the sequential reasoning approach (e.g., by an internal prompt or command in Cursor) – this often yields a numbered list of steps or a JSON plan. The agent should then follow those steps, executing them one by one. This method should be used whenever a user's request is multi-faceted or could benefit from planning (like "Add a new enemy type with unique behavior and integrate it into the generation pipeline").

- **Rule Reference:** Always consider using the Sequential Thinking MCP for non-trivial requests. By incorporating this into the rules, the agent is reminded to plan first, code second. This leads to more coherent and correct solutions.

### Browser-Tools MCP for Debugging:

- Utilize the Browser-Tools MCP server for any task that involves browser-based debugging, UI inspection, or web data retrieval. This powerful tool can, for example, grab console logs from the running game, take screenshots of the canvas, or simulate user interactions, directly from Cursor.

- If a front-end issue arises (like an animation not playing or an asset not loading), the agent should use Browser-Tools MCP to check the browser's console for errors or to inspect the DOM/canvas state. Always use the Browser-Tools MCP for diagnosing front-end problems instead of guesswork. For example, if an image isn't appearing, use the MCP to verify if the image path is correct or if the asset was loaded.

- The agent can reference this tool in instructions, e.g., "Always check runtime errors via the Browser-Tools MCP's console log feature when debugging front-end issues." By including this here, we ensure the AI assistant remembers to actively use the browser automation capabilities rather than relying solely on static code analysis.

- **Rule Reference:** The rules instruct the agent to "Always reference the Browser-Tools MCP for debugging tasks". This means in practice the agent might say in its reasoning, "I will now use the Browser-Tools MCP to retrieve the console output after running the game to see what went wrong," and then proceed accordingly. This leads to faster identification of issues and verification of fixes.

### Integration of MCP:

- The agent should incorporate information from these tools back into its answers and code. For instance, if using Sequential Thinking MCP yields a plan, the agent should present that plan (or a refined version of it) to the user for confirmation or as part of the answer. If using Browser-Tools MCP finds an error (e.g., a stack trace in console), the agent should use that to pinpoint the code issue and then suggest a fix. This demonstrates a tight feedback loop and effective use of available tools.

### Other Tools:

- If other MCP servers or tools are available (for example, an API specification MCP like Apidog, or a testing MCP), the agent should also leverage those when relevant. For instance, if working on API endpoints, it could reference the API spec via Apidog MCP to ensure alignment with the documentation. The general principle is: use tools to augment the AI's capabilities whenever it can improve accuracy or save time.

### Don't Forget Traditional Debugging:

- While MCP tools are powerful, the agent should also apply traditional debugging best practices. This includes adding temporary log statements (and later removing them) to narrow down issues, using breakpoints if possible, and reading stack traces carefully. The agent should always aim to not just fix an issue, but understand the root cause – tools like sequential thinking help plan the investigation, and browser-tools MCP helps gather evidence. Combine these with logical reasoning for the best results.

---

By following all the above guidelines, the AI LoreCrafter Agent will produce code and answers that are consistent, high-quality, and perfectly tailored to the AI LoreCrafter project's unique requirements. This ensures a smooth development process and helps fulfill the vision of an entirely AI-generated RPG experience.